si.version()	X	X	X	library version (no callback/promise)
si.time()	X	X	X	time information (no callback/promise)
- current	X	X	X	local time
- uptime	X	X	X	uptime
si.system(cb)	X	X	X	hardware information
- manufacturer	X	X	X	e.g. 'MSI'
- model	X	X	X	model/product e.g. 'MS-7823'
- version	X	X	X	version e.g. '1.0'
- serial	X	X	X	serial number
- uuid	X	X	X	UUID
si.osInfo(cb)	X	X	X	OS information
- platform	X	X	X	'Linux', 'Darwin', 'Windows'
- distro	X	X	X	
- release	X	X	X	
- codename		X		
- kernel	X	X	X	kernel release - same as os.release()
- arch	X	X	X	same as os.arch()
- hostname	X	X	X	same as os.hostname()
- logofile	X	X	X	e.g. 'apple', 'debian', 'fedora', ...
si.versions(cb)	X	X	X	Version information (kernel, ssl, node, ...)
si.shell(cb)	X	X		standard shell
si.cpu(cb)	X	X	X	CPU information
- manufacturer	X	X	X	e.g. 'Intel(R)'
- brand	X	X	X	e.g. 'Core(TM)2 Duo'
- speed	X	X	X	in GHz e.g. '3.40'
- cores	X	X	X	# cores
si.cpuFlags(cb)	X	X		CPU flags
si.cpuCache(cb)	X	X		CPU cache sizes
- l1d	X	X		L1D size
- l1i	X	X		L1I size
- l2	X	X		L2 size
- l3	X	X		L3 size
si.cpuCurrentspeed(cb)	X	X		current CPU speed (in GHz)
- avg	X	X		avg CPU speed (all cores)
- min	X	X		min CPU speed (all cores)
- max	X	X		max CPU speed (all cores)
si.cpuTemperature(cb)	X	X	X	CPU temperature (if sensors is installed)
- main	X	X	X	main temperature
- cores	X	X	X	array of temperatures
- max	X	X	X	max temperature
si.mem(cb)	X	X	X	Memory information
- total	X	X	X	total memory
- free	X	X	X	not used
- used	X	X	X	used (incl. buffers/cache)
- active	X	X	X	used actively (excl. buffers/cache)
- buffcache	X	X		used by buffers+cache
- available	X	X	X	potentially available (total - active)
- swaptotal	X	X		
- swapused	X	X		
- swapfree	X	X		
si.battery(cb)	X	X		battery information
- hasbattery	X	X		indicates presence of battery
- ischarging	X	X		indicates if battery is charging
- maxcapacity	X	X		max capacity of battery
- currentcapacity	X	X		current capacity of battery
- percent	X	X		charging level in percent
si.graphics(cb)	X	X		arrays of graphics controllers and displays
- controllers[0].model	X	X		graphics controller model
- controllers[0].vendor	X	X		e.g. ATI
- controllers[0].bus	X	X		on which bus (e.g. PCIe)
- controllers[0].vram	X	X		VRAM size (in MB)
- controllers[0].vramDynamic	X	X		true if dynamicly allocated ram
- displays[0].model	X	X		Monitor/Display Model
- displays[0].main	X	X		true if main monitor
- displays[0].builtin	X	X		true if built in monitor
- displays[0].connection	X	X		e.g. DisplayPort or HDMI
- displays[0].resolutionx	X	X		pixel horizontal
- displays[0].resolutiony	X	X		pixel vertical
- displays[0].depth	X	X		color depth in bits
- displays[0].sizex	X	X		size in mm horizontal
- displays[0].sizey	X	X		size in mm vertical
si.fsSize(cb)	X	X	X	returns array of mounted file systems
- [0].fs	X	X	X	name of file system
- [0].type	X	X	X	type of file system
- [0].size	X	X	X	sizes in Bytes
- [0].used	X	X	X	used in Bytes
- [0].use	X	X	X	used in %
- [0].mount	X	X	X	mount point
si.blockDevices(cb)	X	X	X	returns array of disks, partitions,
raids and roms
- [0].name	X	X	X	name
- [0].type	X	X	X	type
- [0].fstype	X	X	X	file system type (e.g. ext4)
- [0].mount	X	X	X	mount point
- [0].size	X	X	X	size in bytes
- [0].physical	X	X	X	physical type (HDD, SSD, CD/DVD)
- [0].uuid	X	X	X	UUID
- [0].label	X	X	X	label
- [0].model	X	X		model
- [0].serial	X		X	serial
- [0].removable	X	X	X	serial
- [0].protocol	X	X		protocol (SATA, PCI-Express, ...)
si.fsStats(cb)	X	X		current transfer stats
- rx	X	X		bytes read since startup
- wx	X	X		bytes written since startup
- tx	X	X		total bytes read + written since startup
- rx_sec	X	X		bytes read / second (* see notes)
- wx_sec	X	X		bytes written / second (* see notes)
- tx_sec	X	X		total bytes reads + written / second
- ms	X	X		interval length (for per second values)
si.disksIO(cb)	X	X		current transfer stats
- rIO	X	X		read IOs on all mounted drives
- wIO	X	X		write IOs on all mounted drives
- tIO	X	X		write IOs on all mounted drives
- rIO_sec	X	X		read IO per sec (* see notes)
- wIO_sec	X	X		write IO per sec (* see notes)
- tIO_sec	X	X		total IO per sec (* see notes)
- ms	X	X		interval length (for per second values)
si.networkInterfaces(cb)	X	X		array of network interfaces
- [0].iface	X	X		interface name
- [0].ip4	X	X		ip4 address
- [0].ip6	X	X		ip6 address
- [0].mac	X	X		MAC address
- [0].internal	X	X		true if internal interface
si.networkInterfaceDefault(cb)	X	X		get name of default network interface
si.networkStats(iface,cb)	X	X		current network stats of given interface
iface parameter is optional
defaults to first external network interface
- iface	X	X		interface
- operstate	X	X		up / down
- rx	X	X		received bytes overall
- tx	X	X		transferred bytes overall
- rx_sec	X	X		received bytes / second (* see notes)
- tx_sec	X	X		transferred bytes per second (* see notes)
- ms	X	X		interval length (for per second values)
si.networkConnections(cb)	X	X		current network network connections
returns an array of all connections
- [0].protocol	X	X		tcp or udp
- [0].localaddress	X	X		local address
- [0].localport	X	X		local port
- [0].peeraddress	X	X		peer address
- [0].peerport	X	X		peer port
- [0].state	X	X		like ESTABLISHED, TIME_WAIT, ...
si.currentLoad(cb)	X	X		CPU-Load
- avgload	X	X		average load
- currentload	X	X		CPU-Load in %
- currentload_user	X	X		CPU-Load User in %
- currentload_nice	X	X		CPU-Load Nice in %
- currentload_system	X	X		CPU-Load System in %
- currentload_irq	X	X		CPU-Load System in %
- cpus[]	X	X		current loads per CPU in %
si.fullLoad(cb)	X	X		CPU-full load since bootup in %
si.services('mysql, apache2', cb)	X	X		pass comma separated string of services
- [0].name	X	X		name of service
- [0].running	X	X		true / false
- [0].pcpu	X	X		process % CPU
- [0].pmem	X	X		process % MEM
si.processes(cb)	X	X		# running processes
- all	X	X		# of all processes
- running	X	X		# of all processes running
- blocked	X	X		# of all processes blocked
- sleeping	X	X		# of all processes sleeping
- list[]	X	X		list of all processes incl. details
- ...[0].pid	X	X		process PID
- ...[0].pcpu	X	X		process % CPU usage
- ...[0].pcpuu	X	X		process % CPU usage (user)
- ...[0].pcpus	X	X		process % CPU usage (system)
- ...[0].pmem	X	X		process memory %
- ...[0].priority	X	X		process priotity
- ...[0].mem_vsz	X	X		process virtual memory size
- ...[0].mem_rss	X	X		process mem resident set size
- ...[0].nice	X	X		process nice value
- ...[0].started	X	X		process start time
- ...[0].state	X	X		process state (e.g. sleeping)
- ...[0].tty	X	X		tty from which process was started
si.processLoad('apache2',cb)	X	X		detailed information about given process
- proc	X	X		process name
- pid	X	X		PID
- cpu	X	X		process % CPU
- mem	X	X		process % MEM
si.users(cb)	X	X		array of users online
- [0].user	X	X		user name
- [0].tty	X	X		terminal
- [0].date	X	X		login date
- [0].time	X	X		login time
- [0].ip	X	X		ip address (remote login)
- [0].command	X	X		last command or shell
si.inetChecksite(url, cb)	X	X		response-time (ms) to fetch given URL
- url	X	X		given url
- ok	X	X		status code OK (2xx, 3xx)
- status	X	X		status code
- ms	X	X		response time in ms
si.inetLatency(host, cb)	X	X		response-time (ms) to external resource
host parameter is optional (default 8.8.8.8)
si.dockerContainers(all, cb)	X	X		returns array of active/all docker containers
- [0].id	X	X		ID of container
- [0].name	X	X		name of container
- [0].image	X	X		name of image
- [0].imageID	X	X		ID of image
- [0].command	X	X		command
- [0].created	X	X		creation time
- [0].state	X	X		created, running, exited
- [0].ports	X	X		array of ports
- [0].mounts	X	X		array of mounts
si.dockerContainerStats(id, cb)	X	X		statistics for a specific container
- id	X	X		Container ID
- mem_usage	X	X		memory usage in bytes
- mem_limit	X	X		memory limit (max mem) in bytes
- mem_percent	X	X		memory usage in percent
- cpu_percent	X	X		cpu usage in percent
- pids	X	X		number of processes
- netIO.rx	X	X		received bytes via network
- netIO.wx	X	X		sent bytes via network
- blockIO.r	X	X		bytes read from BlockIO
- blockIO.w	X	X		bytes written to BlockIO
- cpu_stats	X	X		detailed cpu stats
- percpu_stats	X	X		detailed per cpu stats
- memory_stats	X	X		detailed memory stats
- networks	X	X		detailed network stats per interface
si.dockerContainerProcesses(id, cb)	X	X		array of processes inside a container
- [0].pid_host	X	X		process ID (host)
- [0].ppid	X	X		parent process ID
- [0].pgid	X	X		process group ID
- [0].user	X	X		effective user name
- [0].ruser	X	X		real user name
- [0].group	X	X		effective group name
- [0].rgroup	X	X		real group name
- [0].stat	X	X		process state
- [0].time	X	X		accumulated CPU time
- [0].elapsed	X	X		elapsed running time
- [0].nice	X	X		nice value
- [0].rss	X	X		resident set size
- [0].vsz	X	X		virtual size in Kbytes
- [0].command	X	X		command and arguments
si.dockerAll(cb)	X	X		list of all containers including their stats
and processes in one single array
si.getStaticData(cb)	X	X		all static data at once
si.getDynamicData(srv,iface,cb)	X	X		all dynamic data at once
si.getAllData(srv,iface,cb)	
